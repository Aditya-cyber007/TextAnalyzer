{"version":3,"sources":["components/Alerts.js","components/Navbar.js","components/Textarea.js","App.js","reportWebVitals.js","index.js"],"names":["Alerts","props","alert","react_default","a","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","captialize","msg","data-bs-dismiss","aria-label","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","id","aria-current","home","onClick","toggleMode","htmlFor","Textarea","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading1","value","onChange","event","target","backgroundColor","placeholder","rows","newText","showAlert","splitStr","split","i","length","substring","hello","join","document","getElementById","select","navigator","clipboard","writeText","heading2","protoTypes","PropTypes","string","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","About","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.3f7f97cc.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Alerts(props) {\r\n  const captialize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{captialize(props.alert.type)}</strong> : {props.alert.msg}\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"Close\"\r\n        ></button>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg bg-${props.mode} navbar-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"./navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                {props.home}\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div\r\n          className={`form-check form-switch text-${\r\n            props.mode === \"light\" ? \"dark\" : \"light\"\r\n          }`}\r\n        >\r\n          <input\r\n            className=\"form-check-input\"\r\n            onClick={props.toggleMode}\r\n            type=\"checkbox\"\r\n            id=\"flexSwitchCheckDefault\"\r\n          />\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n            Enable dark Mode\r\n          </label>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\nNavbar.protoTypes = { title: PropTypes.string };\r\n","import React, { useState } from \"react\"; //useState is a hook\r\n\r\nexport default function Textarea(props) {\r\n  const handleupClicked = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Uppercse!\", \"success\");\r\n  };\r\n\r\n  const handleloClicked = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lowercase!\", \"success\");\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setText(\"\");\r\n    props.showAlert(\"Text cleared!\", \"success\");\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    let text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copied to clipboard!\", \"success\");\r\n  };\r\n\r\n  const handleExtraSpace = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces has been removed!\", \"success\");\r\n  };\r\n\r\n  const handleCapitle = () => {\r\n    var splitStr = text.toLowerCase().split(\" \");\r\n    for (var i = 0; i < splitStr.length; i++) {\r\n      splitStr[i] =\r\n        splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\r\n    }\r\n\r\n    let hello = splitStr.join(\" \");\r\n    setText(hello);\r\n    props.showAlert(\"Capitalization has been done!\", \"success\");\r\n  };\r\n\r\n  const handleOnchange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\r\n      >\r\n        <h2>{props.heading1}</h2>\r\n        <textarea\r\n          value={text}\r\n          onChange={handleOnchange}\r\n          style={{\r\n            backgroundColor: props.mode === \"light\" ? \"white\" : \"#042743\",\r\n            color: props.mode === \"light\" ? \"black\" : \"white\",\r\n          }}\r\n          className=\"form-control my-3\"\r\n          placeholder=\"Enter text here\"\r\n          id=\"myBox\"\r\n          rows=\"7\"\r\n        ></textarea>\r\n        <button\r\n          type=\"button\"\r\n          onClick={handleupClicked}\r\n          className=\"btn btn-outline-info mx-1  \"\r\n        >\r\n          ToUpperCase\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={handleloClicked}\r\n          className=\"btn btn-outline-info mx-1  \"\r\n        >\r\n          ToLowerCase\r\n        </button>\r\n\r\n        <button\r\n          type=\"button\"\r\n          onClick={handleCapitle}\r\n          className=\"btn btn-outline-info mx-1  \"\r\n        >\r\n          ToCapital\r\n        </button>\r\n\r\n        <button\r\n          type=\"button\"\r\n          onClick={handleCopy}\r\n          className=\"btn btn-outline-info mx-1  \"\r\n        >\r\n          Copy Text\r\n        </button>\r\n\r\n        <button\r\n          type=\"button\"\r\n          onClick={handleExtraSpace}\r\n          className=\"btn btn-outline-info mx-1  \"\r\n        >\r\n          Remove Extra Spaces\r\n        </button>\r\n\r\n        <button\r\n          type=\"button\"\r\n          onClick={handleClear}\r\n          className=\"btn btn-outline-warning mx-1 \"\r\n        >\r\n          Clear\r\n        </button>\r\n      </div>\r\n\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\r\n      >\r\n        <h2>{props.heading2}</h2>\r\n        <p>\r\n          There are <b>{text.split(\" \").length - 1}</b> words and{\" \"}\r\n          <b>{text.length}</b> characters in your text.{\" \"}\r\n        </p>\r\n        <h4>Preview</h4>\r\n        <p>\r\n          {text.length > 0\r\n            ? text\r\n            : \"Enter something in text area to preview it here\"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport Alerts from \"./components/Alerts\";\nimport Navbar from \"./components/Navbar\";\nimport Textarea from \"./components/Textarea\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"dark\") {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been Enabled\", \"success\");\n    } else {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been Enabled\", \"success\");\n    }\n  };\n\n  return (\n    <>\n      <Navbar\n        title=\"TextUtils\"\n        home=\"Home\"\n        About=\"About\"\n        mode={mode}\n        toggleMode={toggleMode}\n      />\n      <Alerts alert={alert} />\n\n      <Textarea\n        heading1=\"Enter your text to Analyse here!\"\n        heading2=\"Your Text Summary\"\n        mode={mode}\n        showAlert={showAlert}\n      />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}